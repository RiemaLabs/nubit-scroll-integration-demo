// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespace_range_proof.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NamespaceRangeProof struct {
	Start                int64    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  int64    `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	PreIndex             int64    `protobuf:"varint,3,opt,name=pre_index,json=preIndex,proto3" json:"pre_index,omitempty"`
	PostIndex            int64    `protobuf:"varint,4,opt,name=post_index,json=postIndex,proto3" json:"post_index,omitempty"`
	OpenStart            *KzgOpen `protobuf:"bytes,5,opt,name=open_start,json=openStart,proto3" json:"open_start,omitempty"`
	OpenEnd              *KzgOpen `protobuf:"bytes,6,opt,name=open_end,json=openEnd,proto3" json:"open_end,omitempty"`
	OpenPreIndex         *KzgOpen `protobuf:"bytes,7,opt,name=open_pre_index,json=openPreIndex,proto3" json:"open_pre_index,omitempty"`
	OpenPostIndex        *KzgOpen `protobuf:"bytes,8,opt,name=open_post_index,json=openPostIndex,proto3" json:"open_post_index,omitempty"`
	InclusionOrAbsence   bool     `protobuf:"varint,9,opt,name=inclusion_or_absence,json=inclusionOrAbsence,proto3" json:"inclusion_or_absence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamespaceRangeProof) Reset()         { *m = NamespaceRangeProof{} }
func (m *NamespaceRangeProof) String() string { return proto.CompactTextString(m) }
func (*NamespaceRangeProof) ProtoMessage()    {}
func (*NamespaceRangeProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ec606a4fd883b94, []int{0}
}
func (m *NamespaceRangeProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceRangeProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceRangeProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceRangeProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceRangeProof.Merge(m, src)
}
func (m *NamespaceRangeProof) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceRangeProof) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceRangeProof.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceRangeProof proto.InternalMessageInfo

func (m *NamespaceRangeProof) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *NamespaceRangeProof) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *NamespaceRangeProof) GetPreIndex() int64 {
	if m != nil {
		return m.PreIndex
	}
	return 0
}

func (m *NamespaceRangeProof) GetPostIndex() int64 {
	if m != nil {
		return m.PostIndex
	}
	return 0
}

func (m *NamespaceRangeProof) GetOpenStart() *KzgOpen {
	if m != nil {
		return m.OpenStart
	}
	return nil
}

func (m *NamespaceRangeProof) GetOpenEnd() *KzgOpen {
	if m != nil {
		return m.OpenEnd
	}
	return nil
}

func (m *NamespaceRangeProof) GetOpenPreIndex() *KzgOpen {
	if m != nil {
		return m.OpenPreIndex
	}
	return nil
}

func (m *NamespaceRangeProof) GetOpenPostIndex() *KzgOpen {
	if m != nil {
		return m.OpenPostIndex
	}
	return nil
}

func (m *NamespaceRangeProof) GetInclusionOrAbsence() bool {
	if m != nil {
		return m.InclusionOrAbsence
	}
	return false
}

type KzgOpen struct {
	Index                int64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Proof                []byte   `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KzgOpen) Reset()         { *m = KzgOpen{} }
func (m *KzgOpen) String() string { return proto.CompactTextString(m) }
func (*KzgOpen) ProtoMessage()    {}
func (*KzgOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ec606a4fd883b94, []int{1}
}
func (m *KzgOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KzgOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KzgOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KzgOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KzgOpen.Merge(m, src)
}
func (m *KzgOpen) XXX_Size() int {
	return m.Size()
}
func (m *KzgOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_KzgOpen.DiscardUnknown(m)
}

var xxx_messageInfo_KzgOpen proto.InternalMessageInfo

func (m *KzgOpen) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *KzgOpen) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KzgOpen) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*NamespaceRangeProof)(nil), "proof.pb.NamespaceRangeProof")
	proto.RegisterType((*KzgOpen)(nil), "proof.pb.KzgOpen")
}

func init() { proto.RegisterFile("namespace_range_proof.proto", fileDescriptor_3ec606a4fd883b94) }

var fileDescriptor_3ec606a4fd883b94 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0xb6, 0x20, 0xd0, 0x8e, 0xf8, 0xb7, 0x72, 0x68, 0x42, 0x6c, 0x08, 0x27, 0x0e, 0xa6, 0x10,
	0x3d, 0x18, 0x8f, 0x9a, 0x78, 0x30, 0x24, 0x42, 0xea, 0xcd, 0x4b, 0xb3, 0x2d, 0x23, 0x36, 0xa1,
	0xbb, 0x9b, 0x6d, 0x31, 0xc6, 0x27, 0xf1, 0x91, 0x3c, 0xfa, 0x08, 0x06, 0x1f, 0x44, 0xb3, 0xb3,
	0x45, 0xbc, 0x70, 0x6a, 0xbf, 0xbf, 0x9d, 0x6f, 0x27, 0x0b, 0x5d, 0xc1, 0x73, 0x2c, 0x14, 0x4f,
	0x31, 0xd6, 0x5c, 0xcc, 0x31, 0x56, 0x5a, 0xca, 0xa7, 0x50, 0x69, 0x59, 0x4a, 0xe6, 0x56, 0x20,
	0xe9, 0xff, 0xd4, 0xe0, 0xe4, 0x7e, 0xed, 0x8c, 0x8c, 0x71, 0x6a, 0x24, 0xd6, 0x81, 0x46, 0x51,
	0x72, 0x5d, 0xfa, 0x4e, 0xcf, 0x19, 0xd4, 0x23, 0x0b, 0xd8, 0x11, 0xd4, 0x51, 0xcc, 0xfc, 0x1a,
	0x71, 0xe6, 0x97, 0x75, 0xc1, 0x53, 0x1a, 0xe3, 0x4c, 0xcc, 0xf0, 0xd5, 0xaf, 0x13, 0xef, 0x2a,
	0x8d, 0x77, 0x06, 0xb3, 0x53, 0x00, 0x25, 0x8b, 0xb2, 0x52, 0x77, 0x49, 0xf5, 0x0c, 0x63, 0xe5,
	0x11, 0x80, 0x54, 0x28, 0x62, 0x3b, 0xa8, 0xd1, 0x73, 0x06, 0x7b, 0xe7, 0xc7, 0xe1, 0xba, 0x5a,
	0x38, 0x7e, 0x9b, 0x4f, 0x14, 0x8a, 0xc8, 0x33, 0xa6, 0x07, 0x9a, 0x7f, 0x06, 0x2e, 0x25, 0x4c,
	0x89, 0xe6, 0x36, 0x7f, 0xcb, 0x58, 0x6e, 0xc5, 0x8c, 0x5d, 0xc2, 0x01, 0xb9, 0x37, 0x05, 0x5b,
	0xdb, 0x32, 0x6d, 0x63, 0x9c, 0xae, 0x7b, 0x5f, 0xc1, 0xa1, 0x0d, 0x6e, 0xca, 0xbb, 0xdb, 0x92,
	0xfb, 0x94, 0xfc, 0x77, 0xa7, 0x4e, 0x26, 0xd2, 0xc5, 0xb2, 0xc8, 0xa4, 0x88, 0xa5, 0x8e, 0x79,
	0x52, 0xa0, 0x48, 0xd1, 0xf7, 0x7a, 0xce, 0xc0, 0x8d, 0xd8, 0x9f, 0x36, 0xd1, 0xd7, 0x56, 0xe9,
	0x8f, 0xa1, 0x55, 0x9d, 0x65, 0x96, 0x6e, 0xa7, 0x55, 0x4b, 0x27, 0x60, 0xd8, 0x17, 0xbe, 0x58,
	0x22, 0xad, 0xbd, 0x1d, 0x59, 0x60, 0x58, 0xea, 0x42, 0x4b, 0x6f, 0x47, 0x16, 0xdc, 0x8c, 0x3e,
	0x56, 0x81, 0xf3, 0xb9, 0x0a, 0x9c, 0xaf, 0x55, 0xe0, 0xbc, 0x7f, 0x07, 0x3b, 0x8f, 0xc1, 0x3c,
	0x2b, 0x9f, 0x97, 0x49, 0x98, 0xca, 0x7c, 0xa8, 0x33, 0xcc, 0xf9, 0x82, 0x27, 0xc5, 0x50, 0xe4,
	0xe5, 0x90, 0x9e, 0x42, 0xd2, 0xa4, 0xcf, 0xc5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x0a,
	0x98, 0xb9, 0x30, 0x02, 0x00, 0x00,
}

func (m *NamespaceRangeProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceRangeProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceRangeProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InclusionOrAbsence {
		i--
		if m.InclusionOrAbsence {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.OpenPostIndex != nil {
		{
			size, err := m.OpenPostIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.OpenPreIndex != nil {
		{
			size, err := m.OpenPreIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OpenEnd != nil {
		{
			size, err := m.OpenEnd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OpenStart != nil {
		{
			size, err := m.OpenStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PostIndex != 0 {
		i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(m.PostIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.PreIndex != 0 {
		i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(m.PreIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.End != 0 {
		i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KzgOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KzgOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KzgOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintNamespaceRangeProof(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNamespaceRangeProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovNamespaceRangeProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NamespaceRangeProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovNamespaceRangeProof(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovNamespaceRangeProof(uint64(m.End))
	}
	if m.PreIndex != 0 {
		n += 1 + sovNamespaceRangeProof(uint64(m.PreIndex))
	}
	if m.PostIndex != 0 {
		n += 1 + sovNamespaceRangeProof(uint64(m.PostIndex))
	}
	if m.OpenStart != nil {
		l = m.OpenStart.Size()
		n += 1 + l + sovNamespaceRangeProof(uint64(l))
	}
	if m.OpenEnd != nil {
		l = m.OpenEnd.Size()
		n += 1 + l + sovNamespaceRangeProof(uint64(l))
	}
	if m.OpenPreIndex != nil {
		l = m.OpenPreIndex.Size()
		n += 1 + l + sovNamespaceRangeProof(uint64(l))
	}
	if m.OpenPostIndex != nil {
		l = m.OpenPostIndex.Size()
		n += 1 + l + sovNamespaceRangeProof(uint64(l))
	}
	if m.InclusionOrAbsence {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KzgOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovNamespaceRangeProof(uint64(m.Index))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNamespaceRangeProof(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovNamespaceRangeProof(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNamespaceRangeProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNamespaceRangeProof(x uint64) (n int) {
	return sovNamespaceRangeProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NamespaceRangeProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespaceRangeProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceRangeProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceRangeProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreIndex", wireType)
			}
			m.PreIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostIndex", wireType)
			}
			m.PostIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenStart == nil {
				m.OpenStart = &KzgOpen{}
			}
			if err := m.OpenStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenEnd == nil {
				m.OpenEnd = &KzgOpen{}
			}
			if err := m.OpenEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenPreIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenPreIndex == nil {
				m.OpenPreIndex = &KzgOpen{}
			}
			if err := m.OpenPreIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenPostIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenPostIndex == nil {
				m.OpenPostIndex = &KzgOpen{}
			}
			if err := m.OpenPostIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclusionOrAbsence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InclusionOrAbsence = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNamespaceRangeProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KzgOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespaceRangeProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KzgOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KzgOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespaceRangeProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamespaceRangeProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespaceRangeProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespaceRangeProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespaceRangeProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNamespaceRangeProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNamespaceRangeProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNamespaceRangeProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNamespaceRangeProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespaceRangeProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNamespaceRangeProof = fmt.Errorf("proto: unexpected end of group")
)
